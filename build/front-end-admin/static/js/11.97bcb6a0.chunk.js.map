{"version":3,"sources":["Service/UrlClient.ts","Layout/Header/index.tsx","Service/DeleteUser.ts","Service/GetImages.ts","Service/UpdateImage.ts","ComponentsAdmin/Manager/ComponentManager/Image/ManagerImage.tsx","ComponentsAdmin/Manager/ComponentManager/Image/index.tsx"],"names":["authLink","setContext","_","headers","link","createHttpLink","uri","credentials","fetchOptions","client","ApolloClient","cache","InMemoryCache","concat","Header","Layout","login","localStorage","getItem","withRouter","props","push","history","useState","isLogin","setIsLogin","className","type","justify","to","span","size","icon","onClick","removeItem","DELETEUSER","gql","deleteUser","id","mutate","mutation","variables","then","res","data","catch","err","message","info","GETIMAGES","getImages","query","UPDATIMAGE","updateImage","detail","console","log","EditableContext","Select","Option","React","createContext","EditableFormRow","Form","create","form","index","Provider","value","EditableCell","input","state","editing","toggleEdit","setState","focus","save","e","record","handleSave","validateFields","error","values","currentTarget","renderCell","children","dataIndex","title","ref","node","style","width","height","src","Item","margin","getFieldDecorator","rules","required","initialValue","onPressEnter","onBlur","placeholder","paddingRight","this","editable","restProps","Consumer","Component","EditableTable","formRef","saveFormRef","columns","handleDelete","key","dataSource","filter","item","row","newData","findIndex","splice","user","name","description","toggleCollapsed","collapsed","handleClick","current","render","text","length","onConfirm","count","indeterminate","checkAll","items","arr","str","parseInt","path","createdAt","Date","toLocaleDateString","updatedAt","components","body","cell","map","col","onCell","textAlign","selectedKeys","mode","rowClassName","bordered","Page","marginTop","ManagerImage"],"mappings":"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","file":"static/js/11.97bcb6a0.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache } from \"apollo-boost\";\r\nimport { createHttpLink, } from \"apollo-link-http\";\r\nimport { setContext } from \"apollo-link-context\";\r\nconst authLink = setContext((_, { headers }) => {\r\n    return {\r\n        headers: {\r\n            ...headers,\r\n        }\r\n    }\r\n});\r\nconst link = createHttpLink({\r\n    uri: \"http://api.herebedragon.com:4000/graphql\",\r\n    credentials: 'include',\r\n    fetchOptions: {\r\n        credentials: 'include',\r\n    }\r\n});\r\nconst client = new ApolloClient({\r\n    cache: new InMemoryCache(),\r\n    link: authLink.concat(link),\r\n});\r\n\r\nexport default client;","import React, { FunctionComponent, useState } from \"react\";\r\nimport { Layout, Row, Col, Button, Icon, Avatar } from \"antd\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport \"./Header.css\";\r\nconst Header = Layout;\r\nconst login = localStorage.getItem(\"userInfo\");\r\n\r\nconst AdminHeader: FunctionComponent<any> = props => {\r\n  const { push } = props.history;\r\n  const [isLogin, setIsLogin] = useState(login);\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    setIsLogin(\"\");\r\n    push(\"/LoginAdmin\");\r\n  };\r\n  return (\r\n    <Header className=\"header\">\r\n      <Row type=\"flex\" justify=\"space-between\">\r\n        <Link to=\"/EditableTable\" className=\"button-blog\">\r\n          ADMIN\r\n        </Link>\r\n        {isLogin ? (\r\n          <Col span={4} className=\"button-block-loggedin\">\r\n            <Avatar size=\"large\" icon=\"user\" />\r\n            <Button onClick={handleLogout}>\r\n              <Icon type=\"logout\" />\r\n              {`Log out`}\r\n            </Button>\r\n          </Col>\r\n        ) : (\r\n          <Col span={4} className=\"button-block\">\r\n            <Button>\r\n              <Link to=\"/LoginAdmin\">{`Login`}</Link>\r\n            </Button>\r\n          </Col>\r\n        )}\r\n      </Row>\r\n    </Header>\r\n\r\n  );\r\n};\r\n\r\nexport default withRouter(AdminHeader);\r\n\r\n","import { gql } from \"apollo-boost\";\r\nimport client from './UrlClient';\r\nimport { message } from \"antd\";\r\n\r\nconst DELETEUSER = gql`\r\n    mutation DeleteUser($id:String!){\r\n        deleteUser(id:$id)\r\n    }\r\n`\r\nconst deleteUser = (id: string) => {\r\n    return client.mutate({\r\n        mutation: DELETEUSER,\r\n        variables: { id }\r\n    }\r\n    ).then(res => {\r\n        return res.data.deleteUser\r\n    }).catch(err => {\r\n        message.info(err.message);\r\n    })\r\n}\r\nexport default deleteUser","import { gql } from \"apollo-boost\";\r\nimport client from './UrlClient';\r\nimport { message } from \"antd\";\r\nexport { }\r\nconst GETIMAGES = gql`\r\n    query GetImages {\r\n        getImages{\r\n            id\r\n            name\r\n            description\r\n            path\r\n            user{\r\n              id\r\n            }\r\n            createdAt\r\n            updatedAt\r\n          }\r\n    }\r\n`\r\nconst getImages = () => {\r\n    return client.query({\r\n        query: GETIMAGES,\r\n    }).then(res => {\r\n\r\n        return res.data.getImages\r\n    }).catch(err => {\r\n        message.info(err.message);\r\n    })\r\n}\r\nexport default getImages","import { gql } from \"apollo-boost\";\r\nimport client from './UrlClient';\r\nimport { message } from \"antd\";\r\n\r\nconst UPDATIMAGE = gql`\r\n    mutation UpdateImage(\r\n        $id:String!,\r\n        $detail:ImageInputType!,\r\n    ){\r\n        updateImage(\r\n            id:$id,\r\n            detail:$detail,\r\n        ){\r\n            \r\n            id\r\n            name\r\n            description\r\n            path\r\n            user{\r\n              id\r\n            }\r\n            createdAt\r\n            updatedAt\r\n          }\r\n        \r\n    }\r\n`\r\nconst updateImage = (id: string, detail: any) => {\r\n\r\n    return client.mutate({\r\n        mutation: UPDATIMAGE,\r\n        variables: {\r\n            id,\r\n            detail,\r\n        }\r\n    }).then(res => {\r\n        return console.log(res.data.updateImage);\r\n\r\n    }).catch(err => {\r\n        message.info(err.message);\r\n    })\r\n}\r\nexport default updateImage","import {\r\n  Table,\r\n  Input,\r\n  Button,\r\n  Popconfirm,\r\n  Form,\r\n  Modal,\r\n  Select,\r\n  Checkbox,\r\n  Radio,\r\n  DatePicker,\r\n  Icon,\r\n  Menu\r\n} from \"antd\";\r\nimport React from \"react\";\r\nimport { ColumnProps } from \"antd/es/table\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport \"antd/dist/antd.css\";\r\nimport getUsers from \"../../../../Service/GetUsers\";\r\nimport deleteUser from \"../../../../Service/DeleteUser\";\r\nimport updateUser from \"../../../../Service/UpdateUsers\";\r\nimport getRoles from \"../../../../Service/GetRoles\";\r\nimport { Link } from \"react-router-dom\";\r\nimport getImages from \"../../../../Service/GetImages\";\r\nimport updateImage from \"../../../../Service/UpdateImage\";\r\ninterface Props extends FormComponentProps, ColumnProps<any> { }\r\nconst { Option } = Select;\r\nconst EditableContext = React.createContext(\"\");\r\nconst EditableRow = ({ form, index, ...props }: { form: any; index: any }) => (\r\n  <EditableContext.Provider value={form}>\r\n    <tr {...props} />\r\n  </EditableContext.Provider>\r\n);\r\n\r\nconst EditableFormRow = Form.create()(EditableRow);\r\nclass EditableCell extends React.Component<any, any> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n  }\r\n  input: any;\r\n  form: any;\r\n  state = {\r\n    editing: false\r\n  };\r\n\r\n  toggleEdit = () => {\r\n    const editing = !this.state.editing;\r\n    this.setState({ editing }, () => {\r\n      if (editing) {\r\n        this.input.focus();\r\n      }\r\n    });\r\n  };\r\n\r\n  save = (e: any) => {\r\n    const { record, handleSave } = this.props;\r\n\r\n    this.form.validateFields((error: any, values: any) => {\r\n      if (error && error[e.currentTarget.id]) {\r\n        return;\r\n      }\r\n      this.toggleEdit();\r\n      handleSave({ ...record, ...values });\r\n    });\r\n  };\r\n\r\n  renderCell = (form: any) => {\r\n    const { children, dataIndex, record, title } = this.props;\r\n    const { editing } = this.state;\r\n    this.form = form;\r\n    if (title == \"Path\") {\r\n      return (\r\n        <div ref={node => (this.input = node)}>\r\n          <img\r\n            style={{ width: \"100px\", height: \"100px\" }}\r\n            src={`images/${record[\"path\"]}`}\r\n          ></img>\r\n        </div>\r\n      );\r\n    }\r\n    return editing ? (\r\n      <Form.Item style={{ margin: 0 }}>\r\n        {form.getFieldDecorator(dataIndex, {\r\n          rules: [\r\n            {\r\n              required: true,\r\n              message: `${title} is required.`\r\n            }\r\n          ],\r\n          initialValue: record[dataIndex]\r\n        })(\r\n          <Input\r\n            ref={node => (this.input = node)}\r\n            onPressEnter={this.save}\r\n            onBlur={this.save}\r\n            placeholder=\"enter something\"\r\n          />\r\n        )}\r\n      </Form.Item>\r\n    ) : (\r\n        <div\r\n          className=\"editable-cell-value-wrap\"\r\n          style={{ paddingRight: 24, width: \"100%\", height: \"30px\" }}\r\n          onClick={this.toggleEdit}\r\n        >\r\n          {children}\r\n        </div>\r\n      );\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      editable,\r\n      dataIndex,\r\n      id,\r\n      title,\r\n      record,\r\n      index,\r\n      handleSave,\r\n      children,\r\n      ...restProps\r\n    } = this.props;\r\n\r\n    return (\r\n      <td {...restProps}>\r\n        {editable ? (\r\n          <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>\r\n        ) : (\r\n            children\r\n          )}\r\n      </td>\r\n    );\r\n  }\r\n}\r\nclass EditableTable extends React.Component<any, any> {\r\n  formRef: any;\r\n  saveFormRef = (formRef: any) => {\r\n    this.formRef = formRef;\r\n  };\r\n  columns: any[] = [];\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.columns = [\r\n      {\r\n        title: \"Id\",\r\n        dataIndex: \"id\",\r\n        editable: false\r\n      },\r\n      {\r\n        title: \"Name\",\r\n        dataIndex: \"name\",\r\n        editable: true\r\n      },\r\n      {\r\n        title: \"Path\",\r\n        dataIndex: \"path\",\r\n        editable: true\r\n      },\r\n      {\r\n        title: \"Description\",\r\n        dataIndex: \"description\",\r\n        editable: true\r\n      },\r\n      {\r\n        title: \"User\",\r\n        dataIndex: \"user\"\r\n      },\r\n\r\n      {\r\n        title: \"CreatedAt\",\r\n        dataIndex: \"createdAt\"\r\n      },\r\n      {\r\n        title: \"UpdatedAt\",\r\n        dataIndex: \"updatedAt\"\r\n      },\r\n      {\r\n        title: \"Action\",\r\n        dataIndex: \"action\",\r\n        render: (text: any, record: any) => {\r\n          return this.state.dataSource.length > 0 ? (\r\n            <>\r\n              <Popconfirm\r\n                style={{}}\r\n                title=\"Sure to delete?\"\r\n                onConfirm={() => this.handleDelete(record.key, record.id)}\r\n              >\r\n                <Button type=\"danger\">Delete</Button>\r\n              </Popconfirm>\r\n            </>\r\n          ) : null;\r\n        }\r\n      }\r\n    ];\r\n    this.state = {\r\n      current: \"5\",\r\n      dataSource: [],\r\n      count: 0,\r\n      indeterminate: true,\r\n      checkAll: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    getImages().then(items => {\r\n      const arr = [];\r\n      console.log(items);\r\n      for (const str in items) {\r\n        arr.push({\r\n          key: parseInt(str, 10),\r\n          id: items[str].id,\r\n          name: items[str].name,\r\n          path: items[str].path,\r\n          description: items[str].description,\r\n          user: items[str].user.id,\r\n          createdAt: new Date(items[str].createdAt).toLocaleDateString(\"en-US\"),\r\n          updatedAt: new Date(items[str].updatedAt).toLocaleDateString(\"en-US\")\r\n        });\r\n      }\r\n      this.setState({\r\n        dataSource: arr,\r\n        count: arr.length\r\n      });\r\n    });\r\n  }\r\n  handleDelete = (key: any, id: string) => {\r\n    deleteUser(id);\r\n    const dataSource = [...this.state.dataSource];\r\n    this.setState({ dataSource: dataSource.filter(item => item.key !== key) });\r\n  };\r\n\r\n  handleSave = (row: any) => {\r\n    const newData = [...this.state.dataSource];\r\n    const index = newData.findIndex(item => row.key === item.key);\r\n    const item = newData[index];\r\n    newData.splice(index, 1, {\r\n      ...item,\r\n      ...row\r\n    });\r\n\r\n    const user = {\r\n      id: row.id,\r\n      detail: { name: row.name, description: row.description }\r\n    };\r\n\r\n    updateImage(user.id, user.detail);\r\n    this.setState({ dataSource: newData });\r\n  };\r\n  toggleCollapsed = () => {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed\r\n    });\r\n  };\r\n  handleClick = (e: any) => {\r\n    this.setState({\r\n      current: e.key\r\n    });\r\n  };\r\n  render() {\r\n    const { dataSource } = this.state;\r\n\r\n    const components = {\r\n      body: {\r\n        row: EditableFormRow,\r\n        cell: EditableCell\r\n      }\r\n    };\r\n    const columns = this.columns.map(col => {\r\n      if (!col.editable) {\r\n        return col;\r\n      }\r\n      return {\r\n        ...col,\r\n        onCell: (record: any) => ({\r\n          record,\r\n          editable: col.editable,\r\n          dataIndex: col.dataIndex,\r\n          title: col.title,\r\n          handleSave: this.handleSave\r\n        })\r\n      };\r\n    });\r\n    return (\r\n      <div>\r\n        <h1 style={{ textAlign: \"center\" }}>ImageInfo</h1>\r\n        <Menu\r\n          onClick={this.handleClick}\r\n          selectedKeys={[this.state.current]}\r\n          mode=\"horizontal\"\r\n          style={{ textAlign: \"center\" }}\r\n        >\r\n          <Menu.Item key=\"1\">\r\n            <Icon type=\"user\" />\r\n            <span>ManagerUser</span>\r\n            <Link to=\"/ManagerUser\"></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"2\">\r\n            <Icon type=\"shopping\" />\r\n            <span>ManagerOrder</span>\r\n            <Link to=\"/ManagerOrder\"></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"3\">\r\n            <Icon type=\"user-add\" />\r\n            <span>RegisterEmployee</span>\r\n            <Link to=\"/RegisterEmployee\"></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"4\">\r\n            <Icon type=\"team\" />\r\n            <span>ManagerEmployee</span>\r\n            <Link to=\"/ManagerEmployee\"></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"5\">\r\n            <Icon type=\"file-image\" />\r\n            <span>ManagerImage</span>\r\n            <Link to=\"/ManagerImage\"></Link>\r\n          </Menu.Item>\r\n        </Menu>\r\n        <Table\r\n          components={components}\r\n          rowClassName={() => \"editable-row\"}\r\n          bordered\r\n          dataSource={dataSource}\r\n          columns={columns}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditableTable;\r\n","import React, { FunctionComponent } from \"react\";\r\nimport ManagerImage from \"./ManagerImage\";\r\nimport QueueAnim from \"rc-queue-anim\";\r\nimport Header from \"../../../../Layout/Header\";\r\nconst Page: FunctionComponent = () => {\r\n  const margin = {\r\n    marginTop: \"100px\"\r\n  };\r\n  return (\r\n    <QueueAnim type={[\"right\", \"left\"]}>\r\n      <Header />\r\n      <div key=\"0\" style={margin}>\r\n        <ManagerImage />\r\n      </div>\r\n    </QueueAnim>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"],"sourceRoot":""}