{"version":3,"sources":["Service/UrlClient.ts","Validator/ValidatePassword.ts","Service/CreateEmployee.ts","ComponentsAdmin/CreateEmployee/CreateEmployeeForm.tsx","ComponentsAdmin/CreateEmployee/CreateEmployee.tsx","ComponentsAdmin/CreateEmployee/index.tsx"],"names":["authLink","setContext","_","headers","link","createHttpLink","uri","credentials","fetchOptions","client","ApolloClient","cache","InMemoryCache","concat","validatePassword","input","match","CREATEEMPLOYEE","gql","createEmployee","email","password","repeatPassword","detail","mutate","mutation","variables","then","res","data","WrappedFormRegister","Form","create","name","withRouter","props","push","history","form","getFieldDecorator","getFieldValue","validateFields","useState","confirmDirty","setConfirmDirty","labelCol","sm","span","md","wrapperCol","onSubmit","e","preventDefault","validateFieldsAndScroll","err","values","role","getRegister","register","console","log","notification","success","message","catch","error","description","Item","label","rules","type","required","max","hasFeedback","validator","rule","value","callback","force","Password","onBlur","target","title","whitespace","offset","htmlType","style","marginLeft","to","Register","className","justify","lg","xl","CreateEmployeeForm","Page","key"],"mappings":"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","file":"static/js/15.53bf3d0f.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache } from \"apollo-boost\";\r\nimport { createHttpLink, } from \"apollo-link-http\";\r\nimport { setContext } from \"apollo-link-context\";\r\nconst authLink = setContext((_, { headers }) => {\r\n    return {\r\n        headers: {\r\n            ...headers,\r\n        }\r\n    }\r\n});\r\nconst link = createHttpLink({\r\n    uri: \"http://api.herebedragon.com:4000/graphql\",\r\n    credentials: 'include',\r\n    fetchOptions: {\r\n        credentials: 'include',\r\n    }\r\n});\r\nconst client = new ApolloClient({\r\n    cache: new InMemoryCache(),\r\n    link: authLink.concat(link),\r\n});\r\n\r\nexport default client;","export const validatePassword = (input: string): boolean => {\r\n  const patt = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])(?!.*\\s).{5,15}$/;\r\n\r\n  return !!input.match(patt);\r\n};\r\n","import { gql } from \"apollo-boost\";\r\nimport client from './UrlClient';\r\nimport { message } from \"antd\";\r\nconst CREATEEMPLOYEE = gql`\r\n    mutation CreateEmployee(\r\n            $email:String!,\r\n            $password:String!,\r\n            $repeatPassword:String!,\r\n            $detail:EmployeeDetailInputType!\r\n        ){\r\n            createEmployee(\r\n                    email:$email,\r\n                    password:$password,\r\n                    repeatPassword:$repeatPassword,\r\n                    detail:$detail\r\n                    ){\r\n                        name\r\n                        role\r\n                      }\r\n        }\r\n`;\r\nconst createEmployee = (email: string, password: string, repeatPassword: string, detail: any = {}) => {\r\n  return client.mutate({\r\n    mutation: CREATEEMPLOYEE,\r\n    variables: {\r\n      email,\r\n      password,\r\n      repeatPassword,\r\n      detail\r\n    }\r\n  }).then(res => {\r\n    return res.data.createEmployee;\r\n  })\r\n}\r\nexport default createEmployee;","import React, { FunctionComponent, useState } from \"react\";\r\nimport Form, { FormComponentProps } from \"antd/lib/form\";\r\nimport { RouteComponentProps, withRouter, Link } from \"react-router-dom\";\r\nimport { Input, Tooltip, Icon, Radio, Button, notification } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport { validatePassword } from \"../../Validator/ValidatePassword\";\r\nimport getRegister from \"../../Service/CreateEmployee\";\r\n\r\ninterface Props extends FormComponentProps, RouteComponentProps {}\r\nconst Register: FunctionComponent<Props> = props => {\r\n  const buttonBack = {\r\n    marginLeft: \"80px\"\r\n  };\r\n  const { push } = props.history;\r\n\r\n  const compareToFirstPassword = (rule: any, value: any, callback: any) => {\r\n    if (value && value !== getFieldValue(\"password\")) {\r\n      callback(\"Two passwords that you enter is inconsistent!\");\r\n    } else {\r\n      callback();\r\n    }\r\n  };\r\n  const validateToNextPassword = (rule: any, value: any, callback: any) => {\r\n    if (value && confirmDirty) {\r\n      validateFields([\"repeatPassword\"], { force: true });\r\n    }\r\n    callback();\r\n  };\r\n  const validateToPassword = (rule: any, value: any, callback: any) => {\r\n    if (value && !validatePassword(value)) {\r\n      callback(\r\n        \"The input is not valid Password! (8 to 15 characters which contain at least one lowercase letter, one uppercase letter, one numeric digit, and one special character)\"\r\n      );\r\n    }\r\n    callback();\r\n  };\r\n  const handleConfirmBlur = (e: any) => {\r\n    const { value } = e.target;\r\n    setConfirmDirty(confirmDirty || !!value);\r\n  };\r\n  const handleSubmit = (e: any) => {\r\n    e.preventDefault();\r\n    props.form.validateFieldsAndScroll((err, values) => {\r\n      const detail = {\r\n        name: values.name,\r\n        role: values.role\r\n      };\r\n      if (!err) {\r\n        getRegister(\r\n          values.email,\r\n          values.password,\r\n          values.repeatPassword,\r\n          detail\r\n        )\r\n          .then(register => {\r\n            console.log(`register resut`, register);\r\n            notification.success({\r\n              message: `Đăng ký thành công`\r\n            });\r\n            push(\"/LoginAdmin\");\r\n          })\r\n          .catch(err => {\r\n            notification.error({\r\n              message: \"Đăng ký thất bại\",\r\n              description: `${err.message}`\r\n            });\r\n          });\r\n      }\r\n    });\r\n  };\r\n  const { getFieldDecorator, getFieldValue, validateFields } = props.form;\r\n  const formItemLayout = {\r\n    labelCol: {\r\n      sm: { span: 24 },\r\n      md: { span: 8 }\r\n    },\r\n    wrapperCol: {\r\n      sm: { span: 24 },\r\n      md: { span: 16 }\r\n    }\r\n  };\r\n  const tailFormItemLayout = {\r\n    wrapperCol: {\r\n      sm: {\r\n        span: 24,\r\n        offset: 0\r\n      },\r\n      md: {\r\n        span: 16,\r\n        offset: 8\r\n      }\r\n    }\r\n  };\r\n  const [confirmDirty, setConfirmDirty] = useState(false);\r\n  return (\r\n    <Form {...formItemLayout} onSubmit={handleSubmit}>\r\n      <Form.Item label=\"E-mail\">\r\n        {getFieldDecorator(\"email\", {\r\n          rules: [\r\n            {\r\n              type: \"email\",\r\n              message: \"The input is not valid E-mail!\"\r\n            },\r\n            {\r\n              required: true,\r\n              message: \"Please input your E-mail!\"\r\n            },\r\n            {\r\n              max: 50,\r\n              message: \"Character number is greater than allowed!\"\r\n            }\r\n          ]\r\n        })(<Input />)}\r\n      </Form.Item>\r\n      <Form.Item label=\"Password\" hasFeedback>\r\n        {getFieldDecorator(\"password\", {\r\n          rules: [\r\n            {\r\n              required: true,\r\n              message: \"Please input your password!\"\r\n            },\r\n            {\r\n              validator: validateToNextPassword\r\n            },\r\n            {\r\n              validator: validateToPassword\r\n            }\r\n          ]\r\n        })(<Input.Password />)}\r\n      </Form.Item>\r\n      <Form.Item label=\"Confirm Password\" hasFeedback>\r\n        {getFieldDecorator(\"repeatPassword\", {\r\n          rules: [\r\n            {\r\n              required: true,\r\n              message: \"Please confirm your password!\"\r\n            },\r\n            {\r\n              validator: compareToFirstPassword\r\n            }\r\n          ]\r\n        })(<Input.Password onBlur={handleConfirmBlur} />)}\r\n      </Form.Item>\r\n      <Form.Item\r\n        label={\r\n          <span>\r\n            Name&nbsp;\r\n            <Tooltip title=\"What do you want others to call you?\">\r\n              <Icon type=\"question-circle-o\" />\r\n            </Tooltip>\r\n          </span>\r\n        }\r\n      >\r\n        {getFieldDecorator(\"name\", {\r\n          rules: [\r\n            {\r\n              required: true,\r\n              whitespace: true,\r\n              message: \"Please input your name!\"\r\n            },\r\n            {\r\n              max: 50,\r\n              message: \"Character number is greater than allowed!\"\r\n            }\r\n          ]\r\n        })(<Input />)}\r\n      </Form.Item>\r\n      <Form.Item {...tailFormItemLayout}>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Sign up\r\n        </Button>\r\n        <Button style={buttonBack}>\r\n          <Link to=\"/ManagerUser\">{`Back`}</Link>\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\nconst WrappedFormRegister = Form.create<FormComponentProps>({\r\n  name: \"register-form\"\r\n})(withRouter(Register));\r\n\r\nexport default WrappedFormRegister;\r\n","import React, { Component, FunctionComponent } from \"react\";\r\nimport { Row, Col } from \"antd\";\r\nimport CreateEmployeeForm from \"./CreateEmployeeForm\";\r\nimport \"./CreateEmployee.css\";\r\n\r\nconst Register: FunctionComponent = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"title\">Register</h1>\r\n      <Row type=\"flex\" justify=\"center\" className=\"form-block\">\r\n        <Col sm={22} md={20} lg={12} xl={10}>\r\n          <CreateEmployeeForm />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import React, { FunctionComponent } from \"react\";\r\nimport Register from \"./CreateEmployee\";\r\nimport QueueAnim from \"rc-queue-anim\";\r\nconst Page: FunctionComponent = () => {\r\n  return (\r\n    <QueueAnim type={[\"right\", \"left\"]}>\r\n      <div key=\"0\">\r\n        <Register />\r\n      </div>\r\n    </QueueAnim>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"],"sourceRoot":""}