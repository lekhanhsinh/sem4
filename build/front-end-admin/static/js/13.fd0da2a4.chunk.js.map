{"version":3,"sources":["Service/UrlClient.ts","Validator/ValidatePassword.ts","../notification/index.jsx","Service/Login.ts","ComponentsAdmin/Login/LoginForm.tsx","ComponentsAdmin/Login/Login.tsx","ComponentsAdmin/Login/index.tsx"],"names":["authLink","setContext","_","headers","link","createHttpLink","uri","credentials","fetchOptions","client","ApolloClient","cache","InMemoryCache","concat","validatePassword","input","match","notificationInstance","defaultDuration","defaultTop","defaultBottom","defaultPlacement","getPlacementStyle","placement","top","bottom","style","left","right","typeToIcon","success","info","error","warning","api","open","args","outerPrefixCls","prefixCls","duration","iconNode","className","iconType","type","autoMarginTag","getContainer","defaultGetContainer","closeIcon","defaultCloseIcon","cacheKey","callback","closeIconToRender","Notification","getNotificationInstance","notification","content","closable","onClose","onClick","key","close","Object","config","options","destroy","forEach","GETLOGIN","gql","getLogin","email","password","mutate","mutation","variables","then","res","localStorage","removeItem","setItem","data","loginEmployee","WrappedFormLogin","Form","create","name","withRouter","props","push","history","getFieldDecorator","form","onSubmit","e","preventDefault","validateFieldsAndScroll","err","values","message","description","catch","Item","rules","required","max","prefix","color","placeholder","validator","rule","value","htmlType","Login","justify","sm","md","lg","xl","LoginForm","Page"],"mappings":"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","file":"static/js/13.fd0da2a4.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache } from \"apollo-boost\";\r\nimport { createHttpLink, } from \"apollo-link-http\";\r\nimport { setContext } from \"apollo-link-context\";\r\nconst authLink = setContext((_, { headers }) => {\r\n    return {\r\n        headers: {\r\n            ...headers,\r\n        }\r\n    }\r\n});\r\nconst link = createHttpLink({\r\n    uri: \"http://api.herebedragon.com:4000/graphql\",\r\n    credentials: 'include',\r\n    fetchOptions: {\r\n        credentials: 'include',\r\n    }\r\n});\r\nconst client = new ApolloClient({\r\n    cache: new InMemoryCache(),\r\n    link: authLink.concat(link),\r\n});\r\n\r\nexport default client;","export const validatePassword = (input: string): boolean => {\r\n  const patt = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])(?!.*\\s).{5,15}$/;\r\n\r\n  return !!input.match(patt);\r\n};\r\n","import * as React from 'react';\nimport Notification from 'rc-notification';\nimport Icon from '../icon';\nconst notificationInstance = {};\nlet defaultDuration = 4.5;\nlet defaultTop = 24;\nlet defaultBottom = 24;\nlet defaultPlacement = 'topRight';\nlet defaultGetContainer;\nlet defaultCloseIcon;\nfunction setNotificationConfig(options) {\n    const { duration, placement, bottom, top, getContainer, closeIcon } = options;\n    if (duration !== undefined) {\n        defaultDuration = duration;\n    }\n    if (placement !== undefined) {\n        defaultPlacement = placement;\n    }\n    if (bottom !== undefined) {\n        defaultBottom = bottom;\n    }\n    if (top !== undefined) {\n        defaultTop = top;\n    }\n    if (getContainer !== undefined) {\n        defaultGetContainer = getContainer;\n    }\n    if (closeIcon !== undefined) {\n        defaultCloseIcon = closeIcon;\n    }\n}\nfunction getPlacementStyle(placement, top = defaultTop, bottom = defaultBottom) {\n    let style;\n    switch (placement) {\n        case 'topLeft':\n            style = {\n                left: 0,\n                top,\n                bottom: 'auto',\n            };\n            break;\n        case 'topRight':\n            style = {\n                right: 0,\n                top,\n                bottom: 'auto',\n            };\n            break;\n        case 'bottomLeft':\n            style = {\n                left: 0,\n                top: 'auto',\n                bottom,\n            };\n            break;\n        default:\n            style = {\n                right: 0,\n                top: 'auto',\n                bottom,\n            };\n            break;\n    }\n    return style;\n}\nfunction getNotificationInstance({ prefixCls, placement = defaultPlacement, getContainer = defaultGetContainer, top, bottom, closeIcon = defaultCloseIcon, }, callback) {\n    const cacheKey = `${prefixCls}-${placement}`;\n    if (notificationInstance[cacheKey]) {\n        callback(notificationInstance[cacheKey]);\n        return;\n    }\n    const closeIconToRender = (<span className={`${prefixCls}-close-x`}>\n      {closeIcon || <Icon className={`${prefixCls}-close-icon`} type=\"close\"/>}\n    </span>);\n    Notification.newInstance({\n        prefixCls,\n        className: `${prefixCls}-${placement}`,\n        style: getPlacementStyle(placement, top, bottom),\n        getContainer,\n        closeIcon: closeIconToRender,\n    }, (notification) => {\n        notificationInstance[cacheKey] = notification;\n        callback(notification);\n    });\n}\nconst typeToIcon = {\n    success: 'check-circle-o',\n    info: 'info-circle-o',\n    error: 'close-circle-o',\n    warning: 'exclamation-circle-o',\n};\nfunction notice(args) {\n    const outerPrefixCls = args.prefixCls || 'ant-notification';\n    const prefixCls = `${outerPrefixCls}-notice`;\n    const duration = args.duration === undefined ? defaultDuration : args.duration;\n    let iconNode = null;\n    if (args.icon) {\n        iconNode = <span className={`${prefixCls}-icon`}>{args.icon}</span>;\n    }\n    else if (args.type) {\n        const iconType = typeToIcon[args.type];\n        iconNode = (<Icon className={`${prefixCls}-icon ${prefixCls}-icon-${args.type}`} type={iconType}/>);\n    }\n    const autoMarginTag = !args.description && iconNode ? (<span className={`${prefixCls}-message-single-line-auto-margin`}/>) : null;\n    const { placement, top, bottom, getContainer, closeIcon } = args;\n    getNotificationInstance({\n        prefixCls: outerPrefixCls,\n        placement,\n        top,\n        bottom,\n        getContainer,\n        closeIcon,\n    }, (notification) => {\n        notification.notice({\n            content: (<div className={iconNode ? `${prefixCls}-with-icon` : ''}>\n            {iconNode}\n            <div className={`${prefixCls}-message`}>\n              {autoMarginTag}\n              {args.message}\n            </div>\n            <div className={`${prefixCls}-description`}>{args.description}</div>\n            {args.btn ? <span className={`${prefixCls}-btn`}>{args.btn}</span> : null}\n          </div>),\n            duration,\n            closable: true,\n            onClose: args.onClose,\n            onClick: args.onClick,\n            key: args.key,\n            style: args.style || {},\n            className: args.className,\n        });\n    });\n}\nconst api = {\n    open: notice,\n    close(key) {\n        Object.keys(notificationInstance).forEach(cacheKey => notificationInstance[cacheKey].removeNotice(key));\n    },\n    config: setNotificationConfig,\n    destroy() {\n        Object.keys(notificationInstance).forEach(cacheKey => {\n            notificationInstance[cacheKey].destroy();\n            delete notificationInstance[cacheKey];\n        });\n    },\n};\n['success', 'info', 'warning', 'error'].forEach(type => {\n    api[type] = (args) => api.open(Object.assign(Object.assign({}, args), { type }));\n});\napi.warn = api.warning;\nexport default api;\n","import { gql } from \"apollo-boost\";\r\nimport client from './UrlClient';\r\nimport { message } from \"antd\";\r\n\r\nconst GETLOGIN = gql`\r\n  mutation Login($email: String!, $password: String!) {\r\n    loginEmployee(email: $email, password: $password) {\r\n        id      \r\n        email\r\n        name\r\n        role\r\n    }\r\n  }\r\n`;\r\nconst getLogin = (email: string, password: string) => {\r\n  return client\r\n    .mutate({\r\n      mutation: GETLOGIN,\r\n      variables: { email, password }\r\n    })\r\n    .then(res => {\r\n      localStorage.removeItem(\"userInfo\");\r\n      localStorage.setItem(\"userInfo\", res.data.loginEmployee);\r\n      return res.data.loginEmployee;\r\n    })\r\n}\r\nexport default getLogin;","import React, { FunctionComponent } from \"react\";\r\nimport { Form, Input, Icon, Button, notification } from \"antd\";\r\nimport { validatePassword } from \"../../Validator/ValidatePassword\";\r\nimport \"antd/dist/antd.css\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport getLogin from \"../../Service/Login\";\r\nimport getUsers from \"../../Service/GetUsers\";\r\ninterface Props extends FormComponentProps, RouteComponentProps {}\r\n\r\nconst Login: FunctionComponent<Props> = props => {\r\n  const { push } = props.history;\r\n  const { getFieldDecorator } = props.form;\r\n  const validateToPassword = (rule: any, value: any, callback: any) => {\r\n    if (value && !validatePassword(value)) {\r\n      callback(\r\n        \"The input is not valid Password! (8 to 15 characters which contain at least one lowercase letter, one uppercase letter, one numeric digit, and one special character)\"\r\n      );\r\n    }\r\n    callback();\r\n  };\r\n  const handleSubmit = (e: any) => {\r\n    e.preventDefault();\r\n    props.form.validateFieldsAndScroll((err, values) => {\r\n      if (!err) {\r\n        getLogin(values.email, values.password)\r\n          .then(loginEmployee => {\r\n            if (loginEmployee) {\r\n              notification.success({\r\n                message: `Login Successfull`,\r\n                description: `Wellcome ${loginEmployee.name}`\r\n              });\r\n              push(\"/ManagerUser\");\r\n            } else {\r\n              notification.error({\r\n                message: \"Login Fail\",\r\n                description: `Something wrong`\r\n              });\r\n            }\r\n          })\r\n          .catch(err => {\r\n            notification.error({\r\n              message: \"Đăng nhập thất bại\",\r\n              description: `Something wrong`\r\n            });\r\n          });\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <Form onSubmit={handleSubmit} className=\"login-form\">\r\n      <Form.Item>\r\n        {getFieldDecorator(\"email\", {\r\n          rules: [\r\n            { required: true, message: \"Please input your email!\" },\r\n            {\r\n              type: \"email\",\r\n              message: \"The input is not valid E-mail!\"\r\n            },\r\n            {\r\n              max: 50,\r\n              message: \"Character number is greater than allowed\"\r\n            }\r\n          ]\r\n        })(\r\n          <Input\r\n            prefix={<Icon type=\"email\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\r\n            placeholder=\"Email\"\r\n          />\r\n        )}\r\n      </Form.Item>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"password\", {\r\n          rules: [\r\n            { required: true, message: \"Please input your Password!\" },\r\n            {\r\n              validator: validateToPassword\r\n            }\r\n          ]\r\n        })(\r\n          <Input\r\n            prefix={<Icon type=\"lock\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n          />\r\n        )}\r\n      </Form.Item>\r\n      <Form.Item>\r\n        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n          Sign in\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst WrappedFormLogin = Form.create<FormComponentProps>({\r\n  name: \"login-form\"\r\n})(withRouter(Login));\r\n\r\nexport default WrappedFormLogin;\r\n","import React, { Component, FunctionComponent } from \"react\";\r\nimport { Row, Col } from \"antd\";\r\nimport LoginForm from \"./LoginForm\";\r\nimport \"./Login.css\";\r\n\r\nconst Login: FunctionComponent = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"title\">Login</h1>\r\n      <Row type=\"flex\" justify=\"center\">\r\n        <Col sm={16} md={10} lg={8} xl={6}>\r\n          <LoginForm />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\nexport default Login;\r\n","import React, { FunctionComponent } from \"react\";\r\nimport Login from \"./Login\";\r\nimport QueueAnim from \"rc-queue-anim\";\r\nconst Page: FunctionComponent = () => {\r\n  return (\r\n    <QueueAnim type={[\"right\", \"left\"]}>\r\n      <div key=\"0\">\r\n        <Login />\r\n      </div>\r\n    </QueueAnim>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"],"sourceRoot":""}